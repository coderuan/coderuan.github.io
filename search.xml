<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTTP基础</title>
      <link href="/2020/07/10/http-bi-ji/"/>
      <url>/2020/07/10/http-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="1、HTTP简介"><a href="#1、HTTP简介" class="headerlink" title="1、HTTP简介"></a>1、HTTP简介</h3><h4 id="1-1、-HTTP是什么？"><a href="#1-1、-HTTP是什么？" class="headerlink" title="1.1、 HTTP是什么？"></a>1.1、 HTTP是什么？</h4><ol><li><p>HTTP协议是 <strong>Hyper Text Transfer Protocol</strong>（超文本传输协议）的缩写。</p></li><li><p>是用于万维网（WWW:World Wide Web ）传输超文本的传送协议，规定WWW服务器与浏览器之间信息传递规范。（HTTP协议 <strong>永远都是</strong> 客户端发起请求，服务器回送响应）</p></li><li><p>HTTP基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等），默认端口号为80。</p></li></ol><h4 id="1-2、-三个特性"><a href="#1-2、-三个特性" class="headerlink" title="1.2、 三个特性"></a>1.2、 三个特性</h4><ul><li>HTTP是无连接的：每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。（连接是有限的，并且及时地释放连接提高服务器的执行效率）</li><li>HTTP是媒体独立的：只要客户端和服务器知道如何处理数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。（MIME-type：如Content-Type: text/HTML）</li><li>HTTP是无状态：无状态协议，即服务器不保留与客户交易时的任何状态。同一个客户端的这次请求和上次请求是没有对应关系。这就大大减轻了服务器记忆负担，从而保持较快的响应速度。</li></ul><h4 id="1-3、-MIME-type-是什么？"><a href="#1-3、-MIME-type-是什么？" class="headerlink" title="1.3、 MIME-type 是什么？"></a>1.3、 MIME-type 是什么？</h4><ul><li><p>MIME (<strong>M</strong>ultipurpose <strong>I</strong>nternet <strong>M</strong>ail <strong>E</strong>xtensions) —— 描述消息内容类型的因特网标准。</p></li><li><p>也就是资源的媒体类型，通常只有一些在互联网上获得广泛应用的格式才会获得一个 MIME Type。</p></li><li><p>如果是某个客户端自己定义的格式，一般只能以 application/x- 开头。</p></li></ul><p><strong>每个MIME类型由两部分组成：</strong></p><ol><li><p>前面是数据的大类别，例如声音audio、图象image等</p></li><li><p>后面定义具体的种类。</p></li></ol><p><strong>常见的MIME类型：</strong></p><ul><li>超文本标记语言文本 .htm、.html   ——  <strong>text/html</strong> </li><li>普通文本 .txt   ——  <strong>text/plain</strong></li><li>RTF文本 .rtf   ——  *<em>application/rtf *</em></li><li>GIF图形 .gif   ——  <strong>image/gif</strong> </li><li>JPEG图形 .ipeg、.jpg   ——  *<em>image/jpeg *</em></li><li>au声音文件 .au   ——  *<em>audio/basic *</em></li><li>MIDI音乐文件 mid、.midi   ——  <strong>audio/midi</strong></li><li>RealAudio音乐文件 .ra、.ram   ——  <strong>audio/x-pn-realaudio</strong> </li><li>MPEG文件 .mpg、.mpeg   ——  <strong>video/mpeg</strong> </li><li>AVI文件 .avi   ——  <strong>video/x-msvideo</strong> </li><li>GZIP文件 .gz   ——  <strong>application/x-gzip</strong> </li><li>TAR文件 .tar   ——  <strong>application/x-tar</strong> </li></ul><h4 id="1-4、-HTTP的工作原理"><a href="#1-4、-HTTP的工作原理" class="headerlink" title="1.4、 HTTP的工作原理"></a>1.4、 HTTP的工作原理</h4><p>一次HTTP操作称为一个事务，其工作过程可分为四步：</p><p>（1）客户与服务器建立连接（开始一个链接，如点击 &lt;a href=”<a href="https://coderuan.cn&quot;" target="_blank" rel="noopener">https://coderuan.cn&quot;</a> /&gt;wenah阮&lt;/a&gt; 标签）</p><p>（2）客户向服务器提出请求（格式为：请求行、请求头部、空行和请求数据四个部分组成）</p><p>（3）服务器接受请求，并根据请求返回相应的应答（分别是：状态行、消息报头、空行和响应正文）</p><p>（4）客户与服务器关闭连接</p><ul><li>客户与服务器之间的HTTP连接是一种一次性连接，它限制每次连接只处理一个请求，当服务器返回本次请求的应答后便立即关闭连接，下次请求再重新建立连接。</li><li>这种一次性连接主要考虑到WWW服务器面向的是Internet中成干上万个用户，且只能提供有限个连接，故服务器不会让一个连接处于等待状态，及时地释放连接可以大大提高服务器的执行效率。</li></ul><hr><h3 id="2、HTTP请求方法（9种）"><a href="#2、HTTP请求方法（9种）" class="headerlink" title="2、HTTP请求方法（9种）"></a>2、HTTP请求方法（9种）</h3><ul><li><p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。</p></li><li><p>HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p></li></ul><p>常用的请求方法是GET和POST：</p><ol><li>get有传输数据大小限制，安全性差</li><li>post没有传输数据大小限制，安全性高</li></ol><table><thead><tr><th align="left">序号</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">GET</td><td align="left">请求指定的页面信息，并返回实体主体。</td></tr><tr><td align="left">2</td><td align="left">HEAD</td><td align="left">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td align="left">3</td><td align="left">POST</td><td align="left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td align="left">4</td><td align="left">PUT</td><td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td align="left">5</td><td align="left">DELETE</td><td align="left">请求服务器删除指定的页面。</td></tr><tr><td align="left">6</td><td align="left">CONNECT</td><td align="left">HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td align="left">7</td><td align="left">OPTIONS</td><td align="left">允许客户端查看服务器的性能。</td></tr><tr><td align="left">8</td><td align="left">TRACE</td><td align="left">回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td align="left">9</td><td align="left">PATCH</td><td align="left">是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><hr><h3 id="3、HTTP状态码"><a href="#3、HTTP状态码" class="headerlink" title="3、HTTP状态码"></a>3、HTTP状态码</h3><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。</p><p>HTTP状态码共分为5种类型：</p><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息 —— 服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功 —— 操作被成功接收并处理（如200：请求成功，其后是对GET和POST请求的应答文档）</td></tr><tr><td align="left">3**</td><td align="left">重定向 —— 需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误 —— 请求包含语法错误或无法完成请求（如400：Bad Request 服务器未能理解请求、404：Not Found 服务器无法找到被请求的页面。）</td></tr><tr><td align="left">5**</td><td align="left">服务器错误 —— 服务器在处理请求的过程中发生了错误（如500：Internal Server Error内部服务器错误，请求未完成。服务器遇到不可预知的情况。）</td></tr></tbody></table><hr><h3 id="4、-什么是HTTPS"><a href="#4、-什么是HTTPS" class="headerlink" title="4、 什么是HTTPS"></a>4、 什么是HTTPS</h3><ul><li><p>HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道。</p></li><li><p>简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL。</p></li></ul><p><img src="https://coderuan.cn/medias/HTTPS.jpg" alt="题目" title="图解"></p><p>有两种基本的加解密算法类型：</p><ol><li><p>对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等；</p></li><li><p>非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。</p></li></ol><p><strong>https通信的优点：</strong></p><ul><li>客户端产生的密钥只有客户端和服务器端能得到</li><li>加密的数据只有客户端和服务器端才能得到明文</li><li>客户端到服务端的通信是安全的。</li></ul><blockquote><p><a href="https://baike.baidu.com/item/HTTP/243074" target="_blank" rel="noopener">百度百科 HTTP</a></p><p><a href="https://www.runoob.com/http/http-tutorial.html" target="_blank" rel="noopener">菜鸟教程|HTTP</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTTP协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组查找特定组合</title>
      <link href="/2020/07/09/er-wei-shu-zu-cha-zhao-te-ding-zu-he/"/>
      <url>/2020/07/09/er-wei-shu-zu-cha-zhao-te-ding-zu-he/</url>
      
        <content type="html"><![CDATA[<h3 id="舍友面试看见的一道算法题"><a href="#舍友面试看见的一道算法题" class="headerlink" title="舍友面试看见的一道算法题"></a>舍友面试看见的一道算法题</h3><p><img src="https://coderuan.cn/medias/wordsArray.png" alt="题目" title="就这！做了半天！"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Count</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义要查询的查询组合</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> apple <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录查询的下标</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录次数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//题目要求查询的二维数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开始查找</span>        <span class="token function">find</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.首先遍历所有,找出a</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>apple<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 2.从a开始,遍历周围,查找下一个目标字符</span>                    <span class="token function">findChar</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>c<span class="token punctuation">,</span>apple<span class="token punctuation">[</span><span class="token operator">++</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次查找完a,清空下标</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------- 一个'a'查找完毕 -----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总次数："</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义找到的 apple[index] 字符坐标为 (xEnd,yEnd)</span>    <span class="token comment" spellcheck="true">//它的上一个坐标为 (xStart,yStart) ————>防止重复查找</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findChar</span><span class="token punctuation">(</span><span class="token keyword">int</span> xStart<span class="token punctuation">,</span> <span class="token keyword">int</span> yStart<span class="token punctuation">,</span><span class="token keyword">int</span> xEnd<span class="token punctuation">,</span><span class="token keyword">int</span> yEnd<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">,</span><span class="token keyword">char</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xEnd<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、在第一行</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>xEnd<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token punctuation">(</span>xEnd<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历本行以及下一行</span>                <span class="token function">loopY</span><span class="token punctuation">(</span>xStart<span class="token punctuation">,</span>yStart<span class="token punctuation">,</span>xEnd<span class="token punctuation">,</span> yEnd<span class="token punctuation">,</span> i<span class="token punctuation">,</span> c<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> xEnd<span class="token operator">==</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2、在最后行</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token punctuation">(</span>xEnd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>xEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历本行以及上一行</span>                <span class="token function">loopY</span><span class="token punctuation">(</span>xStart<span class="token punctuation">,</span>yStart<span class="token punctuation">,</span>xEnd<span class="token punctuation">,</span> yEnd<span class="token punctuation">,</span> i<span class="token punctuation">,</span> c<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//3、在中间行</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token punctuation">(</span>xEnd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token punctuation">(</span>xEnd<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历本行及上下两行</span>                <span class="token function">loopY</span><span class="token punctuation">(</span>xStart<span class="token punctuation">,</span>yStart<span class="token punctuation">,</span>xEnd<span class="token punctuation">,</span> yEnd<span class="token punctuation">,</span> i<span class="token punctuation">,</span> c<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断列的位置是否在边缘，然后分情况循环查询</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loopY</span><span class="token punctuation">(</span><span class="token keyword">int</span> xStart<span class="token punctuation">,</span> <span class="token keyword">int</span> yStart<span class="token punctuation">,</span><span class="token keyword">int</span> xEnd<span class="token punctuation">,</span> <span class="token keyword">int</span> yEnd<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">,</span><span class="token keyword">char</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>yEnd<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在第一列</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> yEnd<span class="token punctuation">;</span> j<span class="token operator">&lt;=</span><span class="token punctuation">(</span>yEnd<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历本列以及右一列</span>                <span class="token function">check</span><span class="token punctuation">(</span>xStart<span class="token punctuation">,</span> yStart<span class="token punctuation">,</span> xEnd<span class="token punctuation">,</span>yEnd<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>c<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//符合条件，下一轮寻找</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> yEnd<span class="token operator">==</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>xEnd<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在最后列</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>yEnd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>yEnd <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历本列以及左一列</span>                <span class="token function">check</span><span class="token punctuation">(</span>xStart<span class="token punctuation">,</span> yStart<span class="token punctuation">,</span> xEnd<span class="token punctuation">,</span>yEnd<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>c<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//符合条件，下一轮寻找</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在中间列</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>yEnd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span><span class="token punctuation">(</span>yEnd<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历本列，及左右列</span>                <span class="token function">check</span><span class="token punctuation">(</span>xStart<span class="token punctuation">,</span> yStart<span class="token punctuation">,</span> xEnd<span class="token punctuation">,</span>yEnd<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>c<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//符合条件，下一轮寻找</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//开始检验，符合条件回调继续查询</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> xStart<span class="token punctuation">,</span> <span class="token keyword">int</span> yStart<span class="token punctuation">,</span><span class="token keyword">int</span> xEnd<span class="token punctuation">,</span> <span class="token keyword">int</span> yEnd<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">,</span><span class="token keyword">char</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xStart<span class="token operator">==</span>i <span class="token operator">&amp;&amp;</span> yStart<span class="token operator">==</span>j<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//排除上一个点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xEnd<span class="token operator">==</span>i <span class="token operator">&amp;&amp;</span> yEnd<span class="token operator">==</span>j<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//排除自身</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[debug]从第%d行,第%d列————>找到 第%d行,第%d列: %c 字母.\n"</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span>xEnd<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>yEnd<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> apple<span class="token punctuation">[</span>apple<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//找到目标</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[debug]第%d次找到目标e\n"</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计数加一</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">findChar</span><span class="token punctuation">(</span>xEnd<span class="token punctuation">,</span>yEnd<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>c<span class="token punctuation">,</span>apple<span class="token punctuation">[</span><span class="token operator">++</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//符合条件，下一轮寻找</span>            <span class="token operator">--</span>index<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//找完之后，回到上一个节点，继续找</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="程序结果："><a href="#程序结果：" class="headerlink" title="程序结果："></a>程序结果：</h3><p>[debug]从第1行,第1列————&gt;找到 第1行,第2列: p 字母.<br>[debug]从第1行,第2列————&gt;找到 第2行,第2列: p 字母.<br>[debug]从第2行,第2列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第1次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第2次找到目标e<br>[debug]从第1行,第2列————&gt;找到 第2行,第3列: p 字母.<br>[debug]从第2行,第3列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第3次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第4次找到目标e<br>[debug]从第1行,第1列————&gt;找到 第2行,第2列: p 字母.<br>[debug]从第2行,第2列————&gt;找到 第1行,第2列: p 字母.<br>[debug]从第2行,第2列————&gt;找到 第2行,第3列: p 字母.<br>[debug]从第2行,第3列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第5次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第6次找到目标e<br>[debug]从第2行,第2列————&gt;找到 第3行,第3列: p 字母.<br>[debug]从第3行,第3列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第7次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第8次找到目标e<br>[debug]从第3行,第3列————&gt;找到 第4行,第2列: l 字母.<br>[debug]从第4行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第9次找到目标e<br>[debug]从第4行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第10次找到目标e<br>———- 一个’a’查找完毕 ———–<br>[debug]从第2行,第4列————&gt;找到 第2行,第3列: p 字母.<br>[debug]从第2行,第3列————&gt;找到 第1行,第2列: p 字母.<br>[debug]从第2行,第3列————&gt;找到 第2行,第2列: p 字母.<br>[debug]从第2行,第2列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第11次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第12次找到目标e<br>[debug]从第2行,第3列————&gt;找到 第3行,第3列: p 字母.<br>[debug]从第3行,第3列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第13次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第14次找到目标e<br>[debug]从第3行,第3列————&gt;找到 第4行,第2列: l 字母.<br>[debug]从第4行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第15次找到目标e<br>[debug]从第4行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第16次找到目标e<br>[debug]从第2行,第4列————&gt;找到 第3行,第3列: p 字母.<br>[debug]从第3行,第3列————&gt;找到 第2行,第2列: p 字母.<br>[debug]从第2行,第2列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第17次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第18次找到目标e<br>[debug]从第3行,第3列————&gt;找到 第2行,第3列: p 字母.<br>[debug]从第2行,第3列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第19次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第20次找到目标e<br>——— 一个’a’查找完毕 ———–<br>[debug]从第3行,第4列————&gt;找到 第2行,第3列: p 字母.<br>[debug]从第2行,第3列————&gt;找到 第1行,第2列: p 字母.<br>[debug]从第2行,第3列————&gt;找到 第2行,第2列: p 字母.<br>[debug]从第2行,第2列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第21次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第22次找到目标e<br>[debug]从第2行,第3列————&gt;找到 第3行,第3列: p 字母.<br>[debug]从第3行,第3列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第23次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第24次找到目标e<br>[debug]从第3行,第3列————&gt;找到 第4行,第2列: l 字母.<br>[debug]从第4行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第25次找到目标e<br>[debug]从第4行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第26次找到目标e<br>[debug]从第3行,第4列————&gt;找到 第3行,第3列: p 字母.<br>[debug]从第3行,第3列————&gt;找到 第2行,第2列: p 字母.<br>[debug]从第2行,第2列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第27次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第28次找到目标e<br>[debug]从第3行,第3列————&gt;找到 第2行,第3列: p 字母.<br>[debug]从第2行,第3列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第29次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第30次找到目标e<br>——— 一个’a’查找完毕 ———–<br>[debug]从第4行,第4列————&gt;找到 第3行,第3列: p 字母.<br>[debug]从第3行,第3列————&gt;找到 第2行,第2列: p 字母.<br>[debug]从第2行,第2列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第31次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第32次找到目标e<br>[debug]从第3行,第3列————&gt;找到 第2行,第3列: p 字母.<br>[debug]从第2行,第3列————&gt;找到 第3行,第2列: l 字母.<br>[debug]从第3行,第2列————&gt;找到 第3行,第1列: e 字母.<br>[debug]第33次找到目标e<br>[debug]从第3行,第2列————&gt;找到 第4行,第1列: e 字母.<br>[debug]第34次找到目标e<br>——— 一个’a’查找完毕 ———–<br>总次数：34</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>不能空想，要模仿计算机，写出执行步骤，判断逻辑。</li><li>可别再复制黏贴了，就一个 x 和 y 写混了，改了一早上，佛了。</li><li>多写注释，不然过了一晚上，自己的代码都看懵了。</li></ul><hr><p>其实本次实现还不够完善，因为字符里面只有2个 ‘p’ 是重复的，偷懒省去了很多判断。</p><p>上面的代码只取了上一个节点的坐标，保证2个 ‘p’ 没有重复，没有判断的5个点的坐标。</p><hr><h6 id="嘤嘤嘤"><a href="#嘤嘤嘤" class="headerlink" title="嘤嘤嘤"></a>嘤嘤嘤</h6>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2020/07/07/java-yu-yan-gai-shu/"/>
      <url>/2020/07/07/java-yu-yan-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><h4 id="一、Java不同开发版本"><a href="#一、Java不同开发版本" class="headerlink" title="一、Java不同开发版本"></a>一、Java不同开发版本</h4><ul><li>JavaSE：Java Standard Edition —— 基础的控制台程序，桌面应用。</li><li>JavaME：Java Micro Edition (缩小版) —— 电子词典程序，pda软件，机顶盒软件……</li><li>JavaEE：Java Enterprise Edition (企业版) —— Web网站(如：淘宝、京东)。</li></ul><h4 id="二、Java特点与特性"><a href="#二、Java特点与特性" class="headerlink" title="二、Java特点与特性"></a>二、Java特点与特性</h4><h4 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h4><ul><li>简单易用：<ul><li>深层封装语言, 屏蔽很多底层细节, 提供很多工具库。<br>没有指针 (不直接操作内存数据, 不能操作寄存器)。<br>有垃圾回收机制, 帮我们处理内存垃圾数据。</li></ul></li><li>面向对象</li><li>可移植性</li></ul><h4 id="2-2-三大特性"><a href="#2-2-三大特性" class="headerlink" title="2.2 三大特性"></a>2.2 三大特性</h4><ul><li><p>封装 —— 将若干的数据(变量, 方法, 类) 封装为一个整体。</p></li><li><p>继承 —— 从某个资源中继承它的资源 (资源复用, 资源扩展)。</p></li><li><p>多态 —— 某个事物的多种形态、某种行为不同的表达方式。</p></li></ul><h4 id="三、注释"><a href="#三、注释" class="headerlink" title="三、注释"></a>三、注释</h4><blockquote><p>//单行注释</p></blockquote><blockquote><p>/*<br>    多行注释<br>    多行注释<br>    多行注释<br>    多行注释<br>*/</p></blockquote><pre><code>文档注释：    /**     *    @param  参数名     *    @return  指明返回值的含义     *    @exception  完整类名     *    @deprecated  不建议使用、将来可能摈弃的说明     */生成文档注释：javadoc        -d            apidoc        -windowtitle  标题        -doctitle     文档标题        xx.java       Java 源文件 </code></pre><h4 id="四、JVM、JRE、JDK"><a href="#四、JVM、JRE、JDK" class="headerlink" title="四、JVM、JRE、JDK"></a>四、JVM、JRE、JDK</h4><ol><li><p>什么是JVM？</p><p>Java Virtual Machine，Java虚拟机。</p></li><li><p>什么是JRE？</p><p>Java运行时环境：JavaSE（基础类库）+ JVM</p></li><li><p>什么是JDK？</p><p>Java开发工具包：JRE + 开发工具</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后台 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2020/07/01/javascript/"/>
      <url>/2020/07/01/javascript/</url>
      
        <content type="html"><![CDATA[<h3 id="1-为什么要学JavaScript？"><a href="#1-为什么要学JavaScript？" class="headerlink" title="1. 为什么要学JavaScript？"></a>1. 为什么要学JavaScript？</h3><ul><li>表单的注册 —— 表单的页面验证（减轻服务器的压力）</li><li>页面动态效果 —— 树形菜单的使用</li><li>页面内容的动态展示 —— 表单的动态验证、表格的动态数据</li></ul><h3 id="2-JavaScript的特点"><a href="#2-JavaScript的特点" class="headerlink" title="2. JavaScript的特点"></a>2. JavaScript的特点</h3><ul><li>HTML页面添加交互行为</li><li>语法与 Java 类似</li><li>解释性语言，可以边执行边解释</li></ul><h3 id="3-三大组成部分"><a href="#3-三大组成部分" class="headerlink" title="3. 三大组成部分"></a>3. 三大组成部分</h3><ul><li><p>ECMAScript：<a href="http://baike.baidu.com/view/3986646.htm" target="_blank" rel="noopener">Ecma国际</a>以JavaScript为基础制定了<a href="http://baike.baidu.com/view/810176.htm" target="_blank" rel="noopener">ECMAScript</a>标准。</p><ul><li>（函数）</li></ul></li><li><p>DOM：文档对象模型，简单的说，document对象和文档中其他元素</p><ul><li>（如表单、图像、超链接等）</li></ul></li><li><p>BOM：浏览器对象模型，该对象模型提供了独立于内容、可以与浏览器窗口进行互动的对象结构</p><ul><li>（弹窗）</li></ul></li></ul><h3 id="4-引入位置"><a href="#4-引入位置" class="headerlink" title="4. 引入位置"></a>4. 引入位置</h3><ul><li><p><strong>标签中直接使用</strong></p><ul><li><code>&lt;input name=&quot;btn&quot; type=&quot;button&quot; value=&quot;弹出消息框&quot; onclick=&quot;javascript:alert(&#39;欢迎你&#39;);&quot;/&gt;</code></li></ul></li><li><p><strong>&lt;head&gt;标签中调用</strong></p><ul><li><strong>内部调用</strong>  </li></ul><pre><code>&lt;script type=”text/javascript”&gt;        Javascript语句;&lt;/script&gt;</code></pre><ul><li><p><strong>外部调用</strong></p><p><code>&lt;script language=”JavaScript” src=”路径”&gt;&lt;/script&gt;</code></p></li></ul></li><li><p><strong>页面任意位置</strong></p><ul><li>需要调用的元素要保证解析完成（在body里放在需要调用的元素语句后面，最好放在末尾）</li></ul></li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化输出</title>
      <link href="/2020/06/30/ge-shi-hua-shu-chu/"/>
      <url>/2020/06/30/ge-shi-hua-shu-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><h4 id="System-out-printf-方法的使用"><a href="#System-out-printf-方法的使用" class="headerlink" title="System.out.printf(); 方法的使用"></a>System.out.printf(); 方法的使用</h4><table><thead><tr><th>占位符</th><th>说明</th><th>限定位宽</th><th>输出</th></tr></thead><tbody><tr><td>%s</td><td>以字符串的形式输出</td><td>%8s</td><td>最多8个字符</td></tr><tr><td>%f</td><td>以浮点类型的形式输出</td><td>%[位宽] (.) [保留小数个数]f</td><td></td></tr><tr><td>%c</td><td>以字符类型的形式输出</td><td></td><td></td></tr><tr><td>%d</td><td>以十进制整数形式输出</td><td></td><td></td></tr><tr><td>%o</td><td>以八进制整数形式输出</td><td></td><td></td></tr><tr><td>%x</td><td>以十六进制整数形式输出</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown学习</title>
      <link href="/2020/06/28/markdown-xue-xi/"/>
      <url>/2020/06/28/markdown-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown学习"><a href="#Markdown学习" class="headerlink" title="Markdown学习"></a>Markdown学习</h1><h3 id="1-什么是Markdown？"><a href="#1-什么是Markdown？" class="headerlink" title="1.什么是Markdown？"></a>1.什么是Markdown？</h3><p>​        Markdown是一种可以使用普通文本编辑器编写的<a href="https://baike.baidu.com/item/标记语言/5964436" target="_blank" rel="noopener">标记语言</a>，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>​        Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p><h3 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2.基本语法</h3><hr><h4 id="2-1常用语法："><a href="#2-1常用语法：" class="headerlink" title="2.1常用语法："></a>2.1常用语法：</h4><table><thead><tr><th>描述</th><th align="center">输入</th><th align="center">显示效果</th></tr></thead><tbody><tr><td>斜体</td><td align="center">*文本*</td><td align="center"><em>嘤嘤嘤</em></td></tr><tr><td>粗体</td><td align="center">**文本**</td><td align="center"><strong>嘤嘤嘤</strong></td></tr><tr><td>斜体加粗</td><td align="center">***文本***</td><td align="center"><strong><em>嘤嘤嘤</em></strong></td></tr><tr><td>删除线</td><td align="center">~~文本~~</td><td align="center"><del>嘤嘤嘤</del></td></tr><tr><td>链接</td><td align="center">[百度一下](<a href="https://www.baidu.com\" target="_blank" rel="noopener">https://www.baidu.com\</a>)</td><td align="center"><a href="https://www.baidu.com" target="_blank" rel="noopener">百度一下</a></td></tr><tr><td>图片</td><td align="center">![图片下方文字](图片地址 &quot;鼠标悬停时显示的文字&quot;)</td><td align="center">ps: 悬停文字可不要</td></tr><tr><td>无序列表</td><td align="center">* 文本</td><td align="center">ps:- 文本 或 + 文本 也行</td></tr><tr><td>有序列表</td><td align="center">1. 文本</td><td align="center"></td></tr><tr><td>引用</td><td align="center">&gt; 文本</td><td align="center">可以嵌套，如&gt;&gt;、&gt;&gt;&gt;……</td></tr><tr><td>分割线</td><td align="center">- - - 或 ***(3个或以上)</td><td align="center"></td></tr><tr><td>代码</td><td align="center">`单行`          ```多行```</td><td align="center"></td></tr></tbody></table><blockquote><blockquote><p>百度百科（引用示例：&gt;&gt;）</p></blockquote></blockquote><pre class="line-numbers language-示例"><code class="language-示例">示例：多行代码展示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>单行代码展示</code></p><pre class="line-numbers language-表格"><code class="language-表格">|表头|表头|表头||---|:--:|---:||内容|内容|内容||内容|内容|内容|第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个 文字默认居左-两边加：表示文字居中-右边加：表示文字居右 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="2-2-转义字符："><a href="#2-2-转义字符：" class="headerlink" title="2.2 转义字符："></a>2.2 转义字符：</h4><ol><li><p>特殊字符需要用转义字符 \ 输出。 </p></li><li><p>HTML中的转义字符：</p></li></ol><table><thead><tr><th>显示结果</th><th>描述</th><th>输入</th><th>实体编号</th></tr></thead><tbody><tr><td>&nbsp;</td><td>空格</td><td>&amp;nbsp;</td><td>&amp;#160;</td></tr><tr><td>&lt;</td><td>小于</td><td>&amp;lt;</td><td>&amp;#60;</td></tr><tr><td>&gt;</td><td>大于</td><td>&amp;gt;</td><td>&amp;#62;</td></tr><tr><td>&amp;</td><td>和</td><td>&amp;amp;</td><td>&amp;#38;</td></tr><tr><td>&quot;</td><td>双引</td><td>&amp;quot;</td><td>&amp;#34;</td></tr><tr><td>&#39;</td><td>单引</td><td>&amp;apos;</td><td>&amp;#39;</td></tr><tr><td>&divide;</td><td>除号</td><td>&amp;divide;</td><td>&amp;#247;</td></tr><tr><td>&copy;</td><td>版权</td><td>&amp;copy;</td><td>&amp;#169;</td></tr><tr><td>&reg;</td><td>注册商标</td><td>&amp;reg;</td><td>&amp;#174;</td></tr></tbody></table><hr><h4 id="2-3-标题"><a href="#2-3-标题" class="headerlink" title="2.3 标题"></a>2.3 标题</h4><p>对应个数的 “#” 来表示标题级别。</p><p># 一级标题（对应&lt;h1 /&gt;）</p><p>## 二级标题（对应&lt;h2 /&gt;）</p><p>### 三级标题（对应&lt;h3 /&gt;）</p><p>#### 四级标题（对应&lt;h4 /&gt;）</p><p>##### 五级标题（对应&lt;h5 /&gt;）</p><p>###### 六级标题（对应&lt;h6 /&gt;）</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2020/06/16/di-yi-pian-bo-ke/"/>
      <url>/2020/06/16/di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>MySQL</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>JDBC</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
